/*
 * Xero Payroll AU
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xero.models.payrollau;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.xero.models.payrollau.PayRunStatus;
import com.xero.models.payrollau.PayslipSummary;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * Payrun
 */

public class Payrun {
  
  @JsonProperty("PayrollCalendarID")
  private Object payrollCalendarID = null;

  
  @JsonProperty("PayRunID")
  private Object payRunID = null;

  @JsonDeserialize(using = com.xero.api.CustomDateDeserializer.class)
  @JsonProperty("PayRunPeriodStartDate")
  private LocalDate payRunPeriodStartDate;

  @JsonDeserialize(using = com.xero.api.CustomDateDeserializer.class)
  @JsonProperty("PayRunPeriodEndDate")
  private LocalDate payRunPeriodEndDate;

  
  @JsonProperty("PayRunStatus")
  private PayRunStatus payRunStatus;

  @JsonDeserialize(using = com.xero.api.CustomDateDeserializer.class)
  @JsonProperty("PaymentDate")
  private LocalDate paymentDate;

  
  @JsonProperty("PayslipMessage")
  private String payslipMessage;

  @JsonDeserialize(using = com.xero.api.CustomOffsetDateTimeDeserializer.class)
  @JsonProperty("UpdatedDateUTC")
  private OffsetDateTime updatedDateUTC;

  
  @JsonProperty("Payslips")
  private List<PayslipSummary> payslips = new ArrayList<PayslipSummary>();

  
  @JsonProperty("Wages")
  private Float wages;

  
  @JsonProperty("Deductions")
  private Float deductions;

  
  @JsonProperty("Tax")
  private Float tax;

  
  @JsonProperty("Super")
  private Float _super;

  
  @JsonProperty("Reimbursements")
  private Float reimbursements;

  
  @JsonProperty("NetPay")
  private Float netPay;

  public Payrun payrollCalendarID(Object payrollCalendarID) {
    this.payrollCalendarID = payrollCalendarID;
    return this;
  }

   /**
   * Xero identifier for pay run
   * @return payrollCalendarID
  **/
  @ApiModelProperty(example = "bfac31bd-ea62-4fc8-a5e7-7965d9504b15", required = true, value = "Xero identifier for pay run")
  public Object getPayrollCalendarID() {
    return payrollCalendarID;
  }

  public void setPayrollCalendarID(Object payrollCalendarID) {
    this.payrollCalendarID = payrollCalendarID;
  }

  public Payrun payRunID(Object payRunID) {
    this.payRunID = payRunID;
    return this;
  }

   /**
   * Xero identifier for pay run
   * @return payRunID
  **/
  @ApiModelProperty(example = "bba1d10f-63b1-4692-b5c5-a99f869523a4", value = "Xero identifier for pay run")
  public Object getPayRunID() {
    return payRunID;
  }

  public void setPayRunID(Object payRunID) {
    this.payRunID = payRunID;
  }

  public Payrun payRunPeriodStartDate(LocalDate payRunPeriodStartDate) {
    this.payRunPeriodStartDate = payRunPeriodStartDate;
    return this;
  }

   /**
   * Period Start Date for the PayRun (YYYY-MM-DD)
   * @return payRunPeriodStartDate
  **/
  @ApiModelProperty(value = "Period Start Date for the PayRun (YYYY-MM-DD)")
  public LocalDate getPayRunPeriodStartDate() {
    return payRunPeriodStartDate;
  }

  public void setPayRunPeriodStartDate(LocalDate payRunPeriodStartDate) {
    this.payRunPeriodStartDate = payRunPeriodStartDate;
  }

  public Payrun payRunPeriodEndDate(LocalDate payRunPeriodEndDate) {
    this.payRunPeriodEndDate = payRunPeriodEndDate;
    return this;
  }

   /**
   * Period End Date for the PayRun (YYYY-MM-DD)
   * @return payRunPeriodEndDate
  **/
  @ApiModelProperty(value = "Period End Date for the PayRun (YYYY-MM-DD)")
  public LocalDate getPayRunPeriodEndDate() {
    return payRunPeriodEndDate;
  }

  public void setPayRunPeriodEndDate(LocalDate payRunPeriodEndDate) {
    this.payRunPeriodEndDate = payRunPeriodEndDate;
  }

  public Payrun payRunStatus(PayRunStatus payRunStatus) {
    this.payRunStatus = payRunStatus;
    return this;
  }

   /**
   * Get payRunStatus
   * @return payRunStatus
  **/
  @ApiModelProperty(value = "")
  public PayRunStatus getPayRunStatus() {
    return payRunStatus;
  }

  public void setPayRunStatus(PayRunStatus payRunStatus) {
    this.payRunStatus = payRunStatus;
  }

  public Payrun paymentDate(LocalDate paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * Payment Date for the PayRun (YYYY-MM-DD)
   * @return paymentDate
  **/
  @ApiModelProperty(value = "Payment Date for the PayRun (YYYY-MM-DD)")
  public LocalDate getPaymentDate() {
    return paymentDate;
  }

  public void setPaymentDate(LocalDate paymentDate) {
    this.paymentDate = paymentDate;
  }

  public Payrun payslipMessage(String payslipMessage) {
    this.payslipMessage = payslipMessage;
    return this;
  }

   /**
   * Payslip message for the PayRun
   * @return payslipMessage
  **/
  @ApiModelProperty(example = "Thanks for being awesome", value = "Payslip message for the PayRun")
  public String getPayslipMessage() {
    return payslipMessage;
  }

  public void setPayslipMessage(String payslipMessage) {
    this.payslipMessage = payslipMessage;
  }

  public Payrun updatedDateUTC(OffsetDateTime updatedDateUTC) {
    this.updatedDateUTC = updatedDateUTC;
    return this;
  }

   /**
   * Last modified timestamp
   * @return updatedDateUTC
  **/
  @ApiModelProperty(value = "Last modified timestamp")
  public OffsetDateTime getUpdatedDateUTC() {
    return updatedDateUTC;
  }

  public void setUpdatedDateUTC(OffsetDateTime updatedDateUTC) {
    this.updatedDateUTC = updatedDateUTC;
  }

  public Payrun payslips(List<PayslipSummary> payslips) {
    this.payslips = payslips;
    return this;
  }

  public Payrun addPayslipsItem(PayslipSummary payslipsItem) {
    if (this.payslips == null) {
      this.payslips = new ArrayList<PayslipSummary>();
    }
    this.payslips.add(payslipsItem);
    return this;
  }

   /**
   * The payslips in the payrun
   * @return payslips
  **/
  @ApiModelProperty(value = "The payslips in the payrun")
  public List<PayslipSummary> getPayslips() {
    return payslips;
  }

  public void setPayslips(List<PayslipSummary> payslips) {
    this.payslips = payslips;
  }

  public Payrun wages(Float wages) {
    this.wages = wages;
    return this;
  }

   /**
   * The total Wages for the Payrun
   * @return wages
  **/
  @ApiModelProperty(example = "1060.5", value = "The total Wages for the Payrun")
  public Float getWages() {
    return wages;
  }

  public void setWages(Float wages) {
    this.wages = wages;
  }

  public Payrun deductions(Float deductions) {
    this.deductions = deductions;
    return this;
  }

   /**
   * The total Deductions for the Payrun
   * @return deductions
  **/
  @ApiModelProperty(example = "0.0", value = "The total Deductions for the Payrun")
  public Float getDeductions() {
    return deductions;
  }

  public void setDeductions(Float deductions) {
    this.deductions = deductions;
  }

  public Payrun tax(Float tax) {
    this.tax = tax;
    return this;
  }

   /**
   * The total Tax for the Payrun
   * @return tax
  **/
  @ApiModelProperty(example = "198.0", value = "The total Tax for the Payrun")
  public Float getTax() {
    return tax;
  }

  public void setTax(Float tax) {
    this.tax = tax;
  }

  public Payrun _super(Float _super) {
    this._super = _super;
    return this;
  }

   /**
   * The total Super for the Payrun
   * @return _super
  **/
  @ApiModelProperty(example = "75.6", value = "The total Super for the Payrun")
  public Float getSuper() {
    return _super;
  }

  public void setSuper(Float _super) {
    this._super = _super;
  }

  public Payrun reimbursements(Float reimbursements) {
    this.reimbursements = reimbursements;
    return this;
  }

   /**
   * The total Reimbursements for the Payrun
   * @return reimbursements
  **/
  @ApiModelProperty(example = "0.0", value = "The total Reimbursements for the Payrun")
  public Float getReimbursements() {
    return reimbursements;
  }

  public void setReimbursements(Float reimbursements) {
    this.reimbursements = reimbursements;
  }

  public Payrun netPay(Float netPay) {
    this.netPay = netPay;
    return this;
  }

   /**
   * The total NetPay for the Payrun
   * @return netPay
  **/
  @ApiModelProperty(example = "862.5", value = "The total NetPay for the Payrun")
  public Float getNetPay() {
    return netPay;
  }

  public void setNetPay(Float netPay) {
    this.netPay = netPay;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payrun payrun = (Payrun) o;
    return Objects.equals(this.payrollCalendarID, payrun.payrollCalendarID) &&
        Objects.equals(this.payRunID, payrun.payRunID) &&
        Objects.equals(this.payRunPeriodStartDate, payrun.payRunPeriodStartDate) &&
        Objects.equals(this.payRunPeriodEndDate, payrun.payRunPeriodEndDate) &&
        Objects.equals(this.payRunStatus, payrun.payRunStatus) &&
        Objects.equals(this.paymentDate, payrun.paymentDate) &&
        Objects.equals(this.payslipMessage, payrun.payslipMessage) &&
        Objects.equals(this.updatedDateUTC, payrun.updatedDateUTC) &&
        Objects.equals(this.payslips, payrun.payslips) &&
        Objects.equals(this.wages, payrun.wages) &&
        Objects.equals(this.deductions, payrun.deductions) &&
        Objects.equals(this.tax, payrun.tax) &&
        Objects.equals(this._super, payrun._super) &&
        Objects.equals(this.reimbursements, payrun.reimbursements) &&
        Objects.equals(this.netPay, payrun.netPay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payrollCalendarID, payRunID, payRunPeriodStartDate, payRunPeriodEndDate, payRunStatus, paymentDate, payslipMessage, updatedDateUTC, payslips, wages, deductions, tax, _super, reimbursements, netPay);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payrun {\n");
    sb.append("    payrollCalendarID: ").append(toIndentedString(payrollCalendarID)).append("\n");
    sb.append("    payRunID: ").append(toIndentedString(payRunID)).append("\n");
    sb.append("    payRunPeriodStartDate: ").append(toIndentedString(payRunPeriodStartDate)).append("\n");
    sb.append("    payRunPeriodEndDate: ").append(toIndentedString(payRunPeriodEndDate)).append("\n");
    sb.append("    payRunStatus: ").append(toIndentedString(payRunStatus)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    payslipMessage: ").append(toIndentedString(payslipMessage)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    payslips: ").append(toIndentedString(payslips)).append("\n");
    sb.append("    wages: ").append(toIndentedString(wages)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    _super: ").append(toIndentedString(_super)).append("\n");
    sb.append("    reimbursements: ").append(toIndentedString(reimbursements)).append("\n");
    sb.append("    netPay: ").append(toIndentedString(netPay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

